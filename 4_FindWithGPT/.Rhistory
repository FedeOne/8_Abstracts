"; 6) measure type (prevalence, incidence or frequency);",
" 7) measure unit (percentage, per 100 persons/ year...);",
" 8) group characteristics ( for example: age, sex, country, ", data3$populationSuggestion[i] , ")",
"Thanks"
)
paste0(
"Considering the piece of text that follows, please answer to the questions mentioned below. TEXT:",
data3$fullPhrase[i], " etc...",
". QUESTIONS: ",
"are ", data3$freqVS1[i] ," and ", data3$freqVS2[i] , "% measures of prevalence, incidence or describes the general frequency of a characteristic? if no, write: NO.",
"If yes, ", data3$freqVS1[i], "is the frequency of which characteristic? in a group best described by which features? and ",data3$freqVS1[i]," ? ",
"All these answers must be reported as simply and shortly as possible, reported in the following order and separated by a semicolon.",
" If one information is not available, write NA.",
" Here is the answers order:",
" 1) Characteristic related to ",data3$freqVS1[i] , " (for example:", data3$exposureSuggestion[i] , ")",
"; 2) measure type (prevalence, incidence or frequency);",
" 3) measure unit (percentage, per 100 persons/ year...);",
" 4) group characteristics ( for example: age, sex, country, ", data3$populationSuggestion[i] , ")",
" 5) Characteristic related to the second frequency measure ",data3$freqVS2[i] , "% (for example:", data3$exposureSuggestion[i] , ")",
"; 6) measure type (prevalence, incidence or frequency);",
" 7) measure unit (percentage, per 100 persons/ year...);",
" 8) group characteristics ( for example: age, sex, country, ", data3$populationSuggestion[i] , ")",
"Thanks"
)
paste0(
"Considering the piece of text that follows, please answer to the questions mentioned below. TEXT:",
data3$fullPhrase[i], " etc...",
". QUESTIONS: ",
"are ", data3$freqVS1[i] ," and ", data3$freqVS2[i] , "% measures of prevalence, incidence or describes the general frequency of a characteristic? if no, write: NO.",
"If yes, ", data3$freqVS1[i], "is the frequency of which characteristic? in a group best described by which features? and ",data3$freqVS1[i]," ? ",
"All these answers must be reported as simply and shortly as possible, reported in the following order and separated by a semicolon.",
" If one information is not available, write NA.",
" Here is the answers order:",
" 1) Characteristic related to the first frequency measure: ",data3$freqVS1[i] , " (for example:", data3$exposureSuggestion[i] , ")",
"; 2) measure type (prevalence, incidence or frequency);",
" 3) measure unit (percentage, per 100 persons/ year...);",
" 4) group characteristics ( for example: age, sex, country, ", data3$populationSuggestion[i] , ")",
" 5) Characteristic related to the second frequency measure ",data3$freqVS2[i] , "% (for example:", data3$exposureSuggestion[i] , ")",
"; 6) measure type (prevalence, incidence or frequency);",
" 7) measure unit (percentage, per 100 persons/ year...);",
" 8) group characteristics ( for example: age, sex, country, ", data3$populationSuggestion[i] , ")",
"Thanks"
)
paste0(
"Considering the piece of text that follows, please answer to the questions mentioned below. TEXT:",
data3$fullPhrase[i], " etc...",
". QUESTIONS: ",
"are ", data3$freqVS1[i] ," and ", data3$freqVS2[i] , "% measures of prevalence, incidence or describes the general frequency of a characteristic? if no, write: NO.",
"If yes, ", data3$freqVS1[i], "is the frequency of which characteristic? in a group best described by which features? and ",data3$freqVS1[i]," ? ",
"All these answers must be reported as simply and shortly as possible, reported in the following order and separated by a semicolon.",
" If one information is not available, write NA.",
" Here is the answers order:",
" 1) Characteristic related to the first frequency measure: ",data3$freqVS1[i] , " (for example:", data3$exposureSuggestion[i] , ")",
"; 2) measure type (prevalence, incidence or frequency);",
" 3) measure unit (percentage, per 100 persons/ year...);",
" 4) group characteristics ( for example: patients age, sex, country, or patients with: ", data3$populationSuggestion[i] , ")",
" 5) Characteristic related to the second frequency measure ",data3$freqVS2[i] , "% (for example:", data3$exposureSuggestion[i] , ")",
"; 6) measure type (prevalence, incidence or frequency);",
" 7) measure unit (percentage, per 100 persons/ year...);",
" 8)  group characteristics ( for example: patients age, sex, country, or patients with: ", data3$populationSuggestion[i] , ")",
"Thanks"
)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"))
View(frequencies3)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(fullPhrase, keyword, contains("Range"))
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(fullPhrase, keyword, contains("Range"), isVS)
frequencies2 <- frequencies %>%
mutate(
isVS  = str_detect(fullPhrase, paste0(keyword, "\\s*(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bvs\\b|\\bversus\\b))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(fullPhrase, keyword, contains("Range"), isVS)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(fullPhrase, keyword, contains("Range"), isVS, freqVS1,freqVS2,pVal)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), isVS, freqVS1,freqVS2,pVal)
library(devtools)
library(quanteda)
library(gptchatteR)
library(readxl)
library(tidyverse)
library(quanteda)
setwd("C:/Users/Federico/Desktop/8_Abstracts/4_FindWithGPT")
chatter.auth("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")
chatter.create()
data <- readRDS("C:/Users/Federico/Desktop/8_Abstracts/3_FindWithRegex/suggestionsGPTCKD.rds")
# 1. Information managing for clouds ####
### here we should do some managing to get the WORDCLOUD from TITLE + ABSTRACT + Keywords, as long as the studyType, country etc.
### and this for all the studies. Also get study main objective
## 1a. replace acronyms inside abstracts
## 1. Full phrase from abstract ####
### replace acronyms inside the abstracts
### a. acronyms from abstracts ####
#2. Infos for Prevalence and Incidence ####
### filtering studies with Prevalence, incidence and % sign
data2 <- data %>% select(PMID, ABSTRACT, TITLE, contains("contai"), contains("suggest")) %>%
filter(containsPrevalence== TRUE |
containsIncidence == TRUE) %>%
filter(grepl("%", ABSTRACT)) %>%
arrange(PMID)
## 2a. Each line is a frequency measure ####
prevInc <- data2 %>%
filter(!is.na(PMID))  %>%
mutate(doc_id = as.character(PMID) )
corp <- corpus(prevInc, text_field = "ABSTRACT", docid_field = "doc_id")
toks <- tokens(corp)
prevInc2 <- kwic(toks, pattern =  c("prevalence","incidence" ),
window = 60, case_insensitive = TRUE) %>%
rename("PMID"  = 1) %>% as.data.frame()
prevInc3 <- prevInc2 %>% mutate(
# pre = tolower(pre),
# post= tolower(post),
fullPhrase = paste(pre,keyword,post)) %>%
select(PMID,keyword, fullPhrase)%>%
group_by(PMID) %>% arrange(PMID) %>%
mutate(IDRank = seq(1:length(PMID)),
IDletter = letters[IDRank],
doc_id = paste0(PMID,"_",IDletter) ) ## creating new ID cuz in corpus, doc_ID must be unique
corp2 <- corpus(prevInc3, text_field = "fullPhrase", docid_field = "doc_id")
toks2 <- tokens(corp2)
frequencies <- kwic(toks2, phrase("\\d+ %"),valuetype = "regex",
window = 60, case_insensitive = TRUE) %>%
rename("doc_id"  = 1) %>% as.data.frame() %>%  ### some sentence could have been created in double because prevalence is mentioned twice
mutate(PMID = str_remove(doc_id, "_.")) %>%
group_by(PMID) %>% distinct(keyword, .keep_all = TRUE) %>%  ## we filter here the doubles
ungroup() %>%
mutate(isKeywordaCI =  ifelse(tolower(str_extract(post,"..") ) == "ci", "yes",
ifelse(tolower(str_extract(post,"....") ) == "conf", "yes","no") ) ) %>%    ## filter percentages that are confidence intervals
filter(isKeywordaCI == "no")%>% mutate(
# pre = tolower(pre),
# post= tolower(post),
fullPhrase = paste(pre,keyword,post)) %>%
mutate(isKeyCILow1 = str_detect( tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b)\\s*", keyword)),
isKeyCILow2 = str_detect( tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b).{1,20}", keyword,".{1,20}\\)")),  # excepting the parenthesis from the match
isKeyCILow3 = ifelse(str_detect( tolower(keyword), "\\-"), str_detect(tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b).{1,20}", keyword) ),FALSE ),
keyword = str_remove(keyword, "\\-")
) %>%
filter(isKeyCILow1 == FALSE & isKeyCILow2 == FALSE &  isKeyCILow3 == FALSE) %>%
select(doc_id, keyword, fullPhrase) %>%
mutate(PMID = str_remove(doc_id, "_.")) %>%
left_join(select(data2, PMID, exposureSuggestion, populationSuggestion ) )
check <- frequencies %>%
mutate(compare = str_detect( paste0(keyword, "\\s*(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)")))
check <- frequencies %>%
mutate(compare = str_detect( fullPhrase,paste0(keyword, "\\s*(\\bcompare\\b)")))
View(check)
check <- frequencies %>%
mutate(compare = str_detect( fullPhrase,paste0(keyword, "\\s*(\\bcompared\\b)")))
data %>% filter(PMID == "30624674")
data %>% filter(PMID == "30624674") %>% select(ABSTRACT)
f <- data %>% filter(PMID == "30624674") %>% select(ABSTRACT)
View(f)
Vss <- c("\\bv\\b","\\bV\\b","\\bVs\\b","\\bVS\\b","\\bversus\\b",
"compared to", "compared with")
pasteVss <- paste0(Vss, collapse = "|")
pasteVss
frequencies2 <- frequencies %>%
mutate(
isVS1 = str_detect(fullPhrase, paste0(keyword, "\\s*",pasteVss)),
isVS  = str_detect(fullPhrase, paste0(keyword, "\\s*(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bvs\\b|\\bversus\\b))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
View(frequencies2)
pasteVss
frequencies2 <- frequencies %>%
mutate(
isVS1 = str_detect(fullPhrase, paste0(keyword, "\\s*(",pasteVss,")")),
isVS  = str_detect(fullPhrase, paste0(keyword, "\\s*(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bvs\\b|\\bversus\\b))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
frequencies2 <- frequencies %>%
mutate(
isVS = str_detect(fullPhrase, paste0(keyword, "\\s*(",pasteVss,")")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(",pasteVss,"))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(\\bv\\b|\\bV\\b|\\bVs\\b|\\bVS\\b|\\bversus\\b)\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
frequencies2 <- frequencies %>%
mutate(
isVS = str_detect(fullPhrase, paste0(keyword, "\\s*(",pasteVss,")")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(",pasteVss,"))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(",pasteVss,")\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
check <- frequencies %>%
mutate(compare = str_detect( fullPhrase,paste0(keyword, "\\s*(\\bincrease\\b)")))
check <- frequencies %>%
mutate(compare = str_detect( fullPhrase,paste0( "\\s*(\\bincrease\\b\\s*of\\s*)", keyword,)))
check <- frequencies %>%
mutate(compare = str_detect( fullPhrase,paste0( "\\s*(\\bincrease\\b\\s*of\\s*)", keyword)))
check <- frequencies %>%
mutate(increase = str_detect( fullPhrase,paste0( "\\s*(\\bincrease\\b\\s*of\\s*)", keyword)))
frequencies2 <- frequencies %>%
mutate(
isVS = str_detect(fullPhrase, paste0(keyword, "\\s*(",pasteVss,")")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(",pasteVss,"))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(",pasteVss,")\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) )
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
View(frequencies3)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword))
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword))
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword))
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(,keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA )
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA )
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA )
freqRange2 = str_remove(freqRange2, ".*(?=to)")
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*(?=to)")
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?")
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2)
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
select(PMID,fullPhrase, keyword, contains("Range"), freqTo,isVS, freqVS1,freqVS2,pVal , exposureSuggestion, populationSuggestion)
`%notin%` <- Negate(`%in%`)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*?to\\s?"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange) ## to eliminate the doubles rows of the range
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*?to\\s?"),
freqRange2 = str_remove(freqRange2, "(?<=%).*"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange) ## to eliminate the doubles rows of the range
data3 <- frequencies3
View(frequencies3)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*?to\\s?"),
freqRange2 = str_remove(freqRange2, "(?<=%).*"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange) %>%  ## to eliminate the doubles rows of the range
mutate(
pVal = ifelse(freqIsRange2 == TRUE, str_extract(fullPhrase,paste0("(?<=", freqRange2,").*\\(\\s*(p|P).*\\)"  )), pVal ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
)
library(devtools)
library(quanteda)
library(gptchatteR)
library(readxl)
library(tidyverse)
library(quanteda)
`%notin%` <- Negate(`%in%`)
setwd("C:/Users/Federico/Desktop/8_Abstracts/4_FindWithGPT")
chatter.auth("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")
chatter.create()
data <- readRDS("C:/Users/Federico/Desktop/8_Abstracts/3_FindWithRegex/suggestionsGPTCKD.rds")
# 1. Information managing for clouds ####
### here we should do some managing to get the WORDCLOUD from TITLE + ABSTRACT + Keywords, as long as the studyType, country etc.
### and this for all the studies. Also get study main objective
## 1a. replace acronyms inside abstracts
## 1. Full phrase from abstract ####
### replace acronyms inside the abstracts
### a. acronyms from abstracts ####
#2. Infos for Prevalence and Incidence ####
### filtering studies with Prevalence, incidence and % sign
data2 <- data %>% select(PMID, ABSTRACT, TITLE, contains("contai"), contains("suggest")) %>%
filter(containsPrevalence== TRUE |
containsIncidence == TRUE) %>%
filter(grepl("%", ABSTRACT)) %>%
arrange(PMID)
## 2a. Each line is a frequency measure ####
prevInc <- data2 %>%
filter(!is.na(PMID))  %>%
mutate(doc_id = as.character(PMID) )
corp <- corpus(prevInc, text_field = "ABSTRACT", docid_field = "doc_id")
toks <- tokens(corp)
prevInc2 <- kwic(toks, pattern =  c("prevalence","incidence" ),
window = 60, case_insensitive = TRUE) %>%
rename("PMID"  = 1) %>% as.data.frame()
prevInc3 <- prevInc2 %>% mutate(
# pre = tolower(pre),
# post= tolower(post),
fullPhrase = paste(pre,keyword,post)) %>%
select(PMID,keyword, fullPhrase)%>%
group_by(PMID) %>% arrange(PMID) %>%
mutate(IDRank = seq(1:length(PMID)),
IDletter = letters[IDRank],
doc_id = paste0(PMID,"_",IDletter) ) ## creating new ID cuz in corpus, doc_ID must be unique
corp2 <- corpus(prevInc3, text_field = "fullPhrase", docid_field = "doc_id")
toks2 <- tokens(corp2)
frequencies <- kwic(toks2, phrase("\\d+ %"),valuetype = "regex",
window = 60, case_insensitive = TRUE)
frequencies <- kwic(toks2, phrase("\\d+ %"),valuetype = "regex",
window = 60, case_insensitive = TRUE) %>%
rename("doc_id"  = 1) %>% as.data.frame() %>%  ### some sentence could have been created in double because prevalence is mentioned twice
mutate(PMID = str_remove(doc_id, "_.")) %>%
group_by(PMID) %>% distinct(keyword, .keep_all = TRUE) %>%  ## we filter here the doubles
ungroup() %>%
mutate(isKeywordaCI =  ifelse(tolower(str_extract(post,"..") ) == "ci", "yes",
ifelse(tolower(str_extract(post,"....") ) == "conf", "yes","no") ) ) %>%    ## filter percentages that are confidence intervals
filter(isKeywordaCI == "no")%>% mutate(
# pre = tolower(pre),
# post= tolower(post),
fullPhrase = paste(pre,keyword,post)) %>%
mutate(isKeyCILow1 = str_detect( tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b)\\s*", keyword)),
isKeyCILow2 = str_detect( tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b).{1,20}", keyword,".{1,20}\\)")),  # excepting the parenthesis from the match
isKeyCILow3 = ifelse(str_detect( tolower(keyword), "\\-"), str_detect(tolower(fullPhrase), paste0("(\\bci\\b|\\binterval\\b).{1,20}", keyword) ),FALSE ),
keyword = str_remove(keyword, "\\-")
) %>%
filter(isKeyCILow1 == FALSE & isKeyCILow2 == FALSE &  isKeyCILow3 == FALSE) %>%
select(doc_id, keyword, fullPhrase) %>%
mutate(PMID = str_remove(doc_id, "_.")) %>%
left_join(select(data2, PMID, exposureSuggestion, populationSuggestion ) )
Vss <- c("\\bv\\b","\\bV\\b","\\bVs\\b","\\bVS\\b","\\bversus\\b",
"compared to", "compared with")
pasteVss <- paste0(Vss, collapse = "|")
frequencies2 <- frequencies %>%
mutate(
isVS = str_detect(fullPhrase, paste0(keyword, "\\s*(",pasteVss,")")),
freqVS1 = ifelse(isVS == TRUE, keyword, NA),
freqVS2 = ifelse(isVS == TRUE, str_extract( fullPhrase , paste0("(?<=",keyword,"\\s?(",pasteVss,"))\\s*\\d+\\.?\\d+") ), NA ),
toDelete = str_detect(fullPhrase,  paste0( "(",pasteVss,")\\s*", keyword) ) ,
pVal = ifelse(isVS == TRUE, str_extract(fullPhrase,paste0("(?<=", freqVS2,").*\\(\\s*(p|P).*\\)"  )), NA ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
) %>%
filter(toDelete == FALSE)
frequencies3 <- frequencies2 %>%
mutate(freqIsRange = str_extract(fullPhrase, "(from|to)?\\s?((\\d{1,5}\\s?\\.?(\\d{1,5})?\\s?)(p\\s?\\.\\s?1(0{1,5})|%))"),
freqIsRange2 = str_detect(fullPhrase, paste0("from\\s*",keyword) ),
freqTo =str_detect(fullPhrase, paste0("to ", keyword)),
freqRange1 = ifelse(freqIsRange2 == TRUE, keyword, NA),
freqRange2 = ifelse(freqIsRange2 == TRUE, str_extract( fullPhrase , paste0(keyword,".*to \\d+\\.?\\d+?\\s?%") ), NA ),
freqRange2 = str_remove(freqRange2, ".*?to\\s?"),
freqRange2 = str_remove(freqRange2, "(?<=%).*"),
pastePMIDfreqRange = paste(PMID, freqRange2),
pastePMIDkeyword = paste(PMID, keyword)
) %>%
filter(pastePMIDkeyword %notin% pastePMIDfreqRange) %>%  ## to eliminate the doubles rows of the range
mutate(
pVal = ifelse(freqIsRange2 == TRUE, str_extract(fullPhrase,paste0("(?<=", freqRange2,").*\\(\\s*(p|P).*\\)"  )), pVal ),
pVal = str_remove(pVal, ".*?\\(") ,
pVal = str_remove(pVal, "\\).*")
)
